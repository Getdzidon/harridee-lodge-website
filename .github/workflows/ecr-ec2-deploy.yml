name: Pull image from ECR, then deploy to EC2 with Docker Compose
on:
  push:
    branches:
      - main  # Trigger deployment on changes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up/validate AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Set up SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > "Jomacs Demo.pem"
          chmod 600 "Jomacs Demo.pem"

      - name: Get the latest image tag (commit hash)
        id: get_tag
        run: echo "IMAGE_TAG=${GITHUB_SHA:0:7}" >> $GITHUB_ENV  # Use commit hash as the tag

      - name: Deploy to EC2 with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i "Jomacs Demo.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Install Docker Compose if not installed
            sudo apt-get update
            sudo apt-get install -y docker-compose || true

            # Navigate to deployment directory
            cd /home/ubuntu/app || mkdir /home/ubuntu/app && cd /home/ubuntu/app

            # Create docker-compose.yml with the unique image tag
            cat > docker-compose.yml <<EOL
            version: "3"
            services:
              web:
                image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/harridee-webapp:${{ env.IMAGE_TAG }}
                ports:
                  - "80:80"
                restart: always
            EOL

            # Pull the latest image from ECR using the unique tag (this ensures you're getting the newest image)
            sudo docker-compose pull web
            
            # Restart the web service with zero downtime
            sudo docker-compose up --no-deps -d web
            
            # Clean up old images to save space
            sudo docker image prune -f
          EOF
