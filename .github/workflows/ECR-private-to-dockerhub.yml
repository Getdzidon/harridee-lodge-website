name: Build and Push to AWS ECR Private Registry, then to DockerHub

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: harridee-webapp

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code for the first part of the job
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up AWS Credentials
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private  # Set to 'private' if itâ€™s a private repository

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .

      # Generate unique image tag
      - name: Generate unique image tag
        id: generate_tag
        run: |
          # Use commit SHA or a timestamp for unique tagging
          IMAGE_TAG=${GITHUB_SHA:0:7}  # First 7 characters of the commit hash
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # Set the IMAGE_TAG as an environment variable

      # Tag Docker image for ECR with unique tag
      - name: Tag Docker image for ECR with unique tag
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      # Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      # Publishing image from ECR to Docker Hub (optional)
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Tag Image for Docker Hub with unique tag
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      #.................................... 

      # SSH and deploy to EC2 instance
      - name: Set up SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > "Jomacs Demo.pem"
          chmod 600 "Jomacs Demo.pem"

      - name: Deploy to EC2 with Docker Compose
        run: |
          # Use the current commit hash as the image tag
          IMAGE_TAG=${GITHUB_SHA:0:7}  # This takes the first 7 characters of the commit hash

          ssh -o StrictHostKeyChecking=no -i "Jomacs Demo.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            # Install Docker Compose if not installed
            sudo apt-get update
            sudo apt-get install -y docker-compose || true

            # Navigate to deployment directory
            cd /home/ubuntu/app || mkdir /home/ubuntu/app && cd /home/ubuntu/app

            # Create docker-compose.yml with the commit hash tag
            cat > docker-compose.yml <<EOL
            version: "3"
            services:
              web:
                image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/harridee-webapp:${IMAGE_TAG}
                ports:
                  - "80:80"
                restart: always
            EOL

            # Pull the image using the commit hash tag
            sudo docker-compose pull web

            # Force recreate the container to use the latest image
            sudo docker-compose up --force-recreate --no-deps -d web

            # Clean up old images to save space
            sudo docker image prune -f
          EOF