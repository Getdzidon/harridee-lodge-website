name: Build, Push to AWS ECR, and Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger deployment on changes to the main branch

env:
  IMAGE_NAME: harridee-webapp

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up AWS Credentials
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .

      # Step 5: Generate unique image tag using timestamp
      - name: Generate unique image tag with timestamp
        id: generate_tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')  # Using current timestamp (YYYYMMDDHHMMSS format)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # Set the IMAGE_TAG as an environment variable

      # Step 6: Tag Docker image for ECR with unique tag
      - name: Tag Docker image for ECR with timestamp-based tag
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      # Step 7: Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      # Step 8: Login to Docker Hub (optional, remove if not needed)
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Tag Image for Docker Hub with timestamp-based tag
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 9: Set up SSH private key
      - name: Set up SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > "Jomacs Demo.pem"
          chmod 600 "Jomacs Demo.pem"

      # Step 10: Deploy to EC2 with Docker Compose
      - name: Deploy to EC2 with Docker Compose
        run: |
          IMAGE_TAG=${{ env.IMAGE_TAG }}  # Use the timestamp-based image tag

          # Log SSH connection
          echo "Connecting to EC2 instance..."

          ssh -o StrictHostKeyChecking=no -i "Jomacs Demo.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            # Log EC2 commands for debugging
            echo "Running EC2 setup..."

            # Update the package list and install Docker Compose if it's not already installed
            sudo apt-get update
            sudo apt-get install -y docker-compose || true

            # Navigate to deployment directory, create it if doesn't exist
            echo "Navigating to /home/ubuntu/app..."
            cd /home/ubuntu/app || mkdir /home/ubuntu/app && cd /home/ubuntu/app

            # Stop and remove old containers and images first, if any
            echo "Stopping and removing old containers and images..."
            sudo docker-compose down --volumes --remove-orphans
            sudo docker image prune -f

            # Verify if docker-compose.yml exists or not before overwriting
            echo "Checking if docker-compose.yml exists..."
            ls -l

            # Ensure docker-compose.yml is set to pull the correct image with timestamp tag
            echo "Creating docker-compose.yml..."
            cat > docker-compose.yml <<EOL
            version: "3"
            services:
              web:
                image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/harridee-webapp:${IMAGE_TAG}
                ports:
                  - "80:80"
                restart: always
            EOL

            # Log and verify the content of the docker-compose.yml file
            echo "docker-compose.yml content:"
            cat docker-compose.yml

            # Pull the latest image from ECR, forcing the pull
            echo "Pulling the latest image from ECR..."
            sudo docker-compose pull web

            # Recreate containers to use the latest image
            echo "Recreating containers with the latest image..."
            sudo docker-compose up --force-recreate --no-deps -d web

            # Clean up any unused images
            echo "Cleaning up unused images..."
            sudo docker image prune -f

            # Optional: Verify deployment by listing the containers and images
            echo "Listing all running containers..."
            sudo docker ps -a

            echo "Listing all Docker images..."
            sudo docker images
          EOF